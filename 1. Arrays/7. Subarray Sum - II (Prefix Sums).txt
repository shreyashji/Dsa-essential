#include<iostream>
using namespace std;

//Problem : Print all subarrays of a given array
// Prefix Sum Approach O(N^2)
int largestSubarraySum2(int arr[],int n){

	//compute Prefix Sum
	int prefix[100] = {0};
	prefix[0] = arr[0];
	
	for(int i=1;i<n;i++){
		prefix[i] = prefix[i-1] + arr[i];
	}
	//largest sum login
	int largest_sum = 0;
	//this loops take N^2 time
	for(int i=0;i<n;i++){
		for(int j=i; j<n; j++){
			//if i>0 use prrefix[j]-prefix[i-1], if it is equal to 0 prefix[j]
			int subarraySum = i>0 ? prefix[j] - prefix[i-1] : prefix[j];
			//put a check is subarraySum > largest_sum
			largest_sum = max(largest_sum,subarraySum);
		}
	}
	return largest_sum;
}
int main(){
	//Array Containing 
	int arr[] = {-2,3,4,-1,5,-12,6,1,3};
	int n = sizeof(arr)/sizeof(int);
 	cout<< largestSubarraySum2(arr,n) <<endl;
	return 0;
}
//tn= all loops running n times so O(n*n*n) =n^3
//prefixsum= ps[i] = ps[i+1]+current element O(n) time
//ps[j] =ps[i-j] 