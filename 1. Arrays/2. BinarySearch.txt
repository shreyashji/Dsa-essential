#include<iostream>
using namespace std;

int binary_search(int arr[],int n,int key){
	//Implement binary search
	int s = 0;
	int e = n - 1;
	while(s<=e){

		int mid = (s+e)/2;
		if(arr[mid] == key){
			return mid;
		}
		else if(arr[mid] > key){
			e = mid - 1;
		}
		else{
			s = mid + 1;
		}
	}
return -1;
}
int main(){
	int arr[] = {10,20,30,40,45,60,70,89};
	int n = sizeof(arr)/sizeof(int);

	int key;
	cin>>key;

	int index = binary_search(arr,n,key);
	if(index!=-1){
		cout<<key <<" is present at index "<< index <<endl;
	}
	else{
		cout<<key <<" is NOT Found!" <<endl;
	}
	return 0;
}
/*
TN== OTH ITERATION N=N/2^0
1ST ITERATION n/2=n/2^1
2nd iteration n/4=n/2^2
k iteration n/2^k=1, 1=n/2^k

if,else if, else constant work but  while depends upon the valueof n
n/2^k=1
n=2^k
k=logN ,if array of size 16>8>4>2>1 so log16=4, in 4 steps we can find out where the element is in a particular array
that is going to be worstcase its is fast and efficient but only works in sorted search space or monotonic
(non decreasing or non increasing)
*/